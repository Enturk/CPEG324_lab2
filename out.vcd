$date
  Wed Mar 15 13:31:51 2017
$end
$version
  GHDL v0
$end
$timescale
  1 fs
$end
$var reg 8 ! i0[7:0] $end
$var reg 8 " i1[7:0] $end
$var reg 8 # i2[7:0] $end
$var reg 8 $ i3[7:0] $end
$var reg 2 % sel[1:0] $end
$var reg 8 & muxout[7:0] $end
$scope module mymux $end
$var reg 8 ' i0[7:0] $end
$var reg 8 ( i1[7:0] $end
$var reg 8 ) i2[7:0] $end
$var reg 8 * i3[7:0] $end
$var reg 2 + sel[1:0] $end
$var reg 8 , muxout[7:0] $end
$scope module (0) $end
$scope module m0 $end
$var reg 1 - i0 $end
$var reg 1 . i1 $end
$var reg 1 / i2 $end
$var reg 1 0 i3 $end
$var reg 2 1 sel[1:0] $end
$var reg 1 2 muxout $end
$upscope $end
$upscope $end
$scope module (1) $end
$scope module m0 $end
$var reg 1 3 i0 $end
$var reg 1 4 i1 $end
$var reg 1 5 i2 $end
$var reg 1 6 i3 $end
$var reg 2 7 sel[1:0] $end
$var reg 1 8 muxout $end
$upscope $end
$upscope $end
$scope module (2) $end
$scope module m0 $end
$var reg 1 9 i0 $end
$var reg 1 : i1 $end
$var reg 1 ; i2 $end
$var reg 1 < i3 $end
$var reg 2 = sel[1:0] $end
$var reg 1 > muxout $end
$upscope $end
$upscope $end
$scope module (3) $end
$scope module m0 $end
$var reg 1 ? i0 $end
$var reg 1 @ i1 $end
$var reg 1 A i2 $end
$var reg 1 B i3 $end
$var reg 2 C sel[1:0] $end
$var reg 1 D muxout $end
$upscope $end
$upscope $end
$scope module (4) $end
$scope module m0 $end
$var reg 1 E i0 $end
$var reg 1 F i1 $end
$var reg 1 G i2 $end
$var reg 1 H i3 $end
$var reg 2 I sel[1:0] $end
$var reg 1 J muxout $end
$upscope $end
$upscope $end
$scope module (5) $end
$scope module m0 $end
$var reg 1 K i0 $end
$var reg 1 L i1 $end
$var reg 1 M i2 $end
$var reg 1 N i3 $end
$var reg 2 O sel[1:0] $end
$var reg 1 P muxout $end
$upscope $end
$upscope $end
$scope module (6) $end
$scope module m0 $end
$var reg 1 Q i0 $end
$var reg 1 R i1 $end
$var reg 1 S i2 $end
$var reg 1 T i3 $end
$var reg 2 U sel[1:0] $end
$var reg 1 V muxout $end
$upscope $end
$upscope $end
$scope module (7) $end
$scope module m0 $end
$var reg 1 W i0 $end
$var reg 1 X i1 $end
$var reg 1 Y i2 $end
$var reg 1 Z i3 $end
$var reg 2 [ sel[1:0] $end
$var reg 1 \ muxout $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
b10000000 !
b01000000 "
b00100000 #
b00010000 $
bUU %
b00010000 &
b10000000 '
b01000000 (
b00100000 )
b00010000 *
bUU +
b00010000 ,
0-
0.
0/
00
bUU 1
02
03
04
05
06
bUU 7
08
09
0:
0;
0<
bUU =
0>
0?
0@
0A
0B
bUU C
0D
0E
0F
0G
1H
bUU I
1J
0K
0L
1M
0N
bUU O
0P
0Q
1R
0S
0T
bUU U
0V
1W
0X
0Y
0Z
bUU [
0\
#10000000
b00 %
b10000000 &
b00 +
b10000000 ,
b00 1
b00 7
b00 =
b00 C
b00 I
0J
b00 O
b00 U
b00 [
1\
#20000000
b01 %
b01000000 &
b01 +
b01000000 ,
b01 1
b01 7
b01 =
b01 C
b01 I
b01 O
b01 U
1V
b01 [
0\
#30000000
b10 %
b00100000 &
b10 +
b00100000 ,
b10 1
b10 7
b10 =
b10 C
b10 I
b10 O
1P
b10 U
0V
b10 [
#40000000
b11 %
b00010000 &
b11 +
b00010000 ,
b11 1
b11 7
b11 =
b11 C
b11 I
1J
b11 O
0P
b11 U
b11 [
#50000000
